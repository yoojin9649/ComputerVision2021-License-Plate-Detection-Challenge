DetectionRecognitionPipeline(
  (model_det): SSNetDet(
    (stemblock): StemBlock(
      (down_layer1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (branch2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (last_conv): Sequential(
        (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (stages): Sequential(
      (0): StageBlock(
        (layers): Sequential(
          (0): InvertedResidual(
            (banch1): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(32, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (banch2): Sequential(
              (0): Conv2d(32, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=20, bias=False)
              (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (1): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20, bias=False)
              (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (2): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20, bias=False)
              (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (3): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20, bias=False)
              (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
        )
        (enhance_block): GCModule(
          (conv_mask): Conv2d(80, 1, kernel_size=(1, 1), stride=(1, 1))
          (softmax): Softmax(dim=2)
          (channel_add_conv): Sequential(
            (0): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
            (1): LayerNorm((20, 1, 1), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (1): StageBlock(
        (layers): Sequential(
          (0): InvertedResidual(
            (banch1): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (banch2): Sequential(
              (0): Conv2d(80, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)
              (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (1): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)
              (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (2): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)
              (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (3): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (4): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (5): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (6): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
        )
        (enhance_block): GCModule(
          (conv_mask): Conv2d(192, 1, kernel_size=(1, 1), stride=(1, 1))
          (softmax): Softmax(dim=2)
          (channel_add_conv): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): LayerNorm((48, 1, 1), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (2): StageBlock(
        (layers): Sequential(
          (0): InvertedResidual(
            (banch1): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(192, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (banch2): Sequential(
              (0): Conv2d(192, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(112, 112, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=112, bias=False)
              (4): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (1): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(112, 112, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=112, bias=False)
              (4): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (2): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(112, 112, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=112, bias=False)
              (4): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
          (3): InvertedResidual(
            (banch2): Sequential(
              (0): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(112, 112, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=112, bias=False)
              (4): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): Conv2d(112, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (6): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (sumlayers): FeatureSumModule(
      (layers): Sequential(
        (0): Sequential(
          (0): Conv2d(80, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(224, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    (GC_enhance_module): GCModule(
      (conv_mask): Conv2d(192, 1, kernel_size=(1, 1), stride=(1, 1))
      (softmax): Softmax(dim=2)
      (channel_add_conv): Sequential(
        (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1))
        (1): LayerNorm((48, 1, 1), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (post_layers): Sequential(
      (0): BasicResidualBlock(
        (main_branch): Sequential(
          (0): Sequential(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
          (2): Sequential(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (conv_1x1): Sequential(
          (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (1): BasicResidualBlock(
        (main_branch): Sequential(
          (0): Sequential(
            (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
          (2): Sequential(
            (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (conv_1x1): Sequential(
          (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (3): Conv2d(48, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (model_reg): SSNetRegOriginal(
    (stage0): Sequential(
      (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (2): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(12, 12, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(12, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=12, bias=False)
          (4): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(12, 12, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (down_layer1): ParallelDownBlock(
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(24, 12, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(12, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (branch2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (last_conv): Sequential(
        (0): Conv2d(48, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (stage1): Sequential(
      (0): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20, bias=False)
          (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20, bias=False)
          (4): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (avg_context1): ParallelDownBlock(
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Conv2d(10, 40, kernel_size=(1, 7), stride=(1, 4), padding=(0, 3), bias=False)
        (2): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
      )
      (branch2): AvgPool2d(kernel_size=(3, 5), stride=(1, 4), padding=(1, 2))
      (last_conv): Sequential(
        (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (down_layer2): ParallelDownBlock(
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Conv2d(10, 40, kernel_size=(1, 5), stride=(1, 2), padding=(0, 2), bias=False)
        (2): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
      )
      (branch2): MaxPool2d(kernel_size=(3, 3), stride=(1, 2), padding=(1, 1), dilation=1, ceil_mode=False)
      (last_conv): Sequential(
        (0): Conv2d(80, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (stage2): Sequential(
      (0): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (enhance2): GlobalAvgContextEnhanceBlock(
      (layers): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): LayerNorm((8, 1, 1), eps=1e-05, elementwise_affine=True)
      )
      (BN): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (avg_context2): ParallelDownBlock(
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(72, 18, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(18, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Conv2d(18, 72, kernel_size=(1, 5), stride=(1, 2), padding=(0, 2), bias=False)
        (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
      )
      (branch2): AvgPool2d(kernel_size=(3, 3), stride=(1, 2), padding=(1, 1))
      (last_conv): Sequential(
        (0): Conv2d(144, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (down_layer3): ParallelDownBlock(
      (branch1): Sequential(
        (0): Sequential(
          (0): Conv2d(72, 18, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(18, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Conv2d(18, 72, kernel_size=(1, 5), stride=(1, 2), padding=(0, 2), bias=False)
        (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
      )
      (branch2): MaxPool2d(kernel_size=(3, 3), stride=(1, 2), padding=(1, 1), dilation=1, ceil_mode=False)
      (last_conv): Sequential(
        (0): Conv2d(144, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (stage3): Sequential(
      (0): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40, bias=False)
          (4): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40, bias=False)
          (4): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (banch2): Sequential(
          (0): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40, bias=False)
          (4): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (enhance_last): GlobalAvgContextEnhanceBlock(
      (layers): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2d(192, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): LayerNorm((24, 1, 1), eps=1e-05, elementwise_affine=True)
      )
      (BN): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (postprocessor): Sequential(
      (0): Conv2d(216, 108, kernel_size=(1, 5), stride=(1, 1), padding=(0, 2))
      (1): BatchNorm2d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(108, 108, kernel_size=(13, 1), stride=(1, 1), padding=(6, 0))
      (4): BatchNorm2d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): AvgPool2d(kernel_size=(4, 3), stride=(4, 1), padding=(0, 1))
    )
    (container): Sequential(
      (0): Conv2d(108, 68, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (perspective_trans_function): PerspectiveTrans()
)